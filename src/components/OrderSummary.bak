"use client";

import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useToast } from '@/components/ui/use-toast';
import { cn } from '@/lib/utils';
import { Edit, Trash2, Plus, Minus, Check, X } from 'lucide-react';

type OrderItem = {
  id: string;
  name: string;
  price: number;
  quantity: number;
  options?: Record<string, string>;
  notes?: string;
  vendorName?: string;
  vendorId?: string;
  username?: string;
};

type OrderStatus = 'pending' | 'paid' | 'cancelled';

interface OrderSummaryProps {
  items: OrderItem[];
  orderStatus: OrderStatus;
  deadlinePassed: boolean;
  onSave?: (updatedItems: OrderItem[]) => Promise<void>;
  onDelete?: () => Promise<void>;
  className?: string;
}

const OrderSummary = ({
  items,
  orderStatus,
  deadlinePassed,
  onSave,
  onDelete,
  className,
}: OrderSummaryProps) => {
  const { toast } = useToast();
  const [isEditing, setIsEditing] = useState(false);
  const [editingItems, setEditingItems] = useState<OrderItem[]>([]);
  const [isSaving, setIsSaving] = useState(false);
  const [notes, setNotes] = useState('');

  useEffect(() => {
    setEditingItems([...items]);
  }, [items]);

  const handleToggleEdit = () => {
    setIsEditing(!isEditing);
  };

  const handleSave = async () => {
    if (!onSave) return;

    try {
      setIsSaving(true);
      await onSave(editingItems);
      toast({
        title: "成功",
        description: "訂單已更新",
      });
    } catch (error) {
      console.error('更新訂單失敗:', error);
      toast({
        title: "錯誤",
        description: "更新訂單時發生錯誤",
        variant: "destructive",
      });
    } finally {
      setIsSaving(false);
    }
  };

  const handleDelete = async () => {
    if (!onDelete) return;

    try {
      await onDelete();
      toast({
        title: "成功",
        description: "訂單已刪除",
      });
    } catch (error) {
      console.error('刪除訂單失敗:', error);
      toast({
        title: "錯誤",
        description: "刪除訂單時發生錯誤",
        variant: "destructive",
      });
    }
  };

  const updateItemQuantity = (index: number, quantity: number) => {
    if (quantity < 1) return;
    const newItems = [...editingItems];
    newItems[index] = { ...newItems[index], quantity };
    setEditingItems(newItems);
  };

  const removeItem = (index: number) => {
    const newItems = [...editingItems];
    newItems.splice(index, 1);
    setEditingItems(newItems);
  };

  const displayItems = isEditing ? editingItems : items;
  const total = displayItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  const canEdit = !deadlinePassed && orderStatus === 'pending';

  const renderOrderItems = () => {
    if (displayItems.length === 0) {
      return (
        <div className="text-center py-8 text-muted-foreground">
          尚未添加任何項目
        </div>
      );
    }

    return displayItems.map((item, index) => (
      <div 
        key={`${item.id}-${index}`} 
        className="flex items-start justify-between p-3 border rounded-lg hover:bg-muted/50 transition-colors mb-2"
      >
        <div className="flex-1">
          <div className="font-medium">{item.name}</div>
          {item.notes && (
            <div className="text-sm text-muted-foreground mt-1">
              備註: {item.notes}
            </div>
          )}
          {item.options && Object.keys(item.options).length > 0 && (
            <div className="text-sm text-muted-foreground mt-1">
              選項: {Object.entries(item.options)
                .map(([key, value]) => `${key}: ${value}`)
                .join(', ')}
            </div>
          )}
          
          {isEditing && (
            <div className="flex items-center mt-2">
              <Button
                variant="outline"
                size="sm"
                className="h-6 w-6 p-0"
                onClick={() => updateItemQuantity(index, item.quantity - 1)}
              >
                <Minus className="h-3.5 w-3.5" />
              </Button>
              <Input
                type="number"
                min={1}
                value={item.quantity}
                onChange={(e) => updateItemQuantity(index, parseInt(e.target.value) || 1)}
                className="w-12 h-6 mx-1 text-center"
              />
              <Button
                variant="outline"
                size="sm"
                className="h-6 w-6 p-0"
                onClick={() => updateItemQuantity(index, item.quantity + 1)}
              >
                <Plus className="h-3.5 w-3.5" />
              </Button>
              <Button
                variant="ghost"
                size="sm"
                className="h-6 w-6 p-0 ml-2 text-destructive"
                onClick={() => removeItem(index)}
              >
                <Trash2 className="h-3.5 w-3.5" />
              </Button>
            </div>
          )}
        </div>
        
        <div className="text-right ml-4">
          <div className="font-medium">${item.price * item.quantity}</div>
          {!isEditing && (
            <div className="text-sm text-muted-foreground">x{item.quantity}</div>
          )}
        </div>
      </div>
    ));
  };

  const renderActionButtons = () => {
    if (!canEdit) return null;

    if (!isEditing) {
      return (
        <div className="flex gap-2">
          <Button 
            variant="outline" 
            size="sm" 
            onClick={handleToggleEdit}
            className="h-8"
          >
            <Edit className="h-4 w-4 mr-1" />
            編輯
          </Button>
          <Button 
            variant="outline" 
            size="sm" 
            onClick={handleDelete}
            className="h-8 text-destructive hover:text-destructive"
          >
            <Trash2 className="h-4 w-4 mr-1" />
            刪除
          </Button>
        </div>
      );
    }

    return (
      <div className="flex gap-2">
        <Button 
          variant="outline" 
          size="sm" 
          onClick={handleToggleEdit}
          className="h-8"
          disabled={isSaving}
        >
          <X className="h-4 w-4 mr-1" />
          取消
        </Button>
        <Button 
          size="sm" 
          onClick={handleSave}
          className="h-8"
          disabled={isSaving}
        >
          {isSaving ? (
            <span className="flex items-center">
              <span className="animate-spin mr-1">⟳</span>
              儲存中...
            </span>
          ) : (
            <>
              <Check className="h-4 w-4 mr-1" />
              儲存變更
            </>
          )}
        </Button>
      </div>
    );
  };

  const renderStatusMessage = () => {
    if (deadlinePassed) {
      return (
        <div className="mt-3 text-sm text-amber-600 bg-amber-50 p-2 rounded-md">
          訂單已截止，無法修改
        </div>
      );
    }
    
    if (orderStatus === 'paid') {
      return (
        <div className="mt-3 text-sm text-green-600 bg-green-50 p-2 rounded-md">
          訂單已付款
        </div>
      );
    }
    
    if (orderStatus === 'cancelled') {
      return (
        <div className="mt-3 text-sm text-muted-foreground bg-muted/50 p-2 rounded-md">
          訂單已取消
        </div>
      );
    }
    
    return null;
  };

  return (
    <div className={cn("bg-white rounded-lg shadow-sm border p-4", className)}>
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-semibold">我的訂單</h3>
        {renderActionButtons()}
      </div>

      <div className="space-y-3">
        {renderOrderItems()}
      </div>

      {displayItems.length > 0 && (
{item.notes && (
<div className="text-sm text-muted-foreground mt-1">
備註: {item.notes}
</div>
)}
{item.options && Object.keys(item.options).length > 0 && (
<div className="text-sm text-muted-foreground mt-1">
選項: {Object.entries(item.options)
.map(([key, value]) => `${key}: ${value}`)
.join(', ')}
</div>
)}
  
{isEditing && (
<div className="flex items-center mt-2">
<Button
variant="outline"
size="sm"
className="h-6 w-6 p-0"
onClick={() => updateItemQuantity(index, item.quantity - 1)}
>
<Minus className="h-3.5 w-3.5" />
</Button>
<Input
type="number"
min={1}
value={item.quantity}
onChange={(e) => updateItemQuantity(index, parseInt(e.target.value) || 1)}
className="w-12 h-6 mx-1 text-center"
/>
<Button
variant="outline"
size="sm"
className="h-6 w-6 p-0"
onClick={() => updateItemQuantity(index, item.quantity + 1)}
>
<Plus className="h-3.5 w-3.5" />
</Button>
<Button
variant="ghost"
size="sm"
className="h-6 w-6 p-0 ml-2 text-destructive"
onClick={() => removeItem(index)}
>
<Trash2 className="h-3.5 w-3.5" />
</Button>
</div>
)}
</div>
  
<div className="text-right ml-4">
<div className="font-medium">${item.price * item.quantity}</div>
{!isEditing && (
<div className="text-sm text-muted-foreground">x{item.quantity}</div>
)}
</div>
</div>
));
};

const renderActionButtons = () => {
if (!canEdit) return null;

if (!isEditing) {
return (
<div className="flex gap-2">
<Button 
variant="outline" 
size="sm" 
onClick={handleToggleEdit}
className="h-8"
>
<Edit className="h-4 w-4 mr-1" />
編輯
</Button>
<Button 
variant="outline" 
size="sm" 
onClick={handleDelete}
className="h-8 text-destructive hover:text-destructive"
>
<Trash2 className="h-4 w-4 mr-1" />
刪除
</Button>
</div>
);
}

return (
<div className="flex gap-2">
<Button 
variant="outline" 
size="sm" 
onClick={handleToggleEdit}
className="h-8"
disabled={isSaving}
>
<X className="h-4 w-4 mr-1" />
取消
</Button>
<Button 
size="sm" 
onClick={handleSave}
className="h-8"
disabled={isSaving}
>
{isSaving ? (
<span className="flex items-center">
<span className="animate-spin mr-1">⟳</span>
儲存中...
</span>
) : (
<>
<Check className="h-4 w-4 mr-1" />
儲存變更
</>
)}
</Button>
</div>
);
};

const renderStatusMessage = () => {
if (deadlinePassed) {
return (
<div className="mt-3 text-sm text-amber-600 bg-amber-50 p-2 rounded-md">
訂單已截止，無法修改
</div>
);
}
  
if (orderStatus === 'paid') {
return (
<div className="mt-3 text-sm text-green-600 bg-green-50 p-2 rounded-md">
訂單已付款
</div>
);
}
  
if (orderStatus === 'cancelled') {
return (
<div className="mt-3 text-sm text-muted-foreground bg-muted/50 p-2 rounded-md">
訂單已取消
</div>
);
}
};

return (
<div className={cn("bg-white rounded-lg shadow-sm border p-4", className)}>
<div className="flex justify-between items-center mb-4">
<h3 className="text-lg font-semibold">我的訂單</h3>
{renderActionButtons()}
</div>

<div className="space-y-3">
{renderOrderItems()}
</div>

{displayItems.length > 0 && (
<div className="mt-4 pt-4 border-t">
<div className="flex justify-between items-center">
<span className="font-medium">總計</span>
<span className="text-lg font-semibold">${total}</span>
</div>
</div>
)}

{renderStatusMessage()}
</div>
);
}
